// Generated by gencpp from file fm_gripper_msgs/FmGripperGoal.msg
// DO NOT EDIT!


#ifndef FM_GRIPPER_MSGS_MESSAGE_FMGRIPPERGOAL_H
#define FM_GRIPPER_MSGS_MESSAGE_FMGRIPPERGOAL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace fm_gripper_msgs
{
template <class ContainerAllocator>
struct FmGripperGoal_
{
  typedef FmGripperGoal_<ContainerAllocator> Type;

  FmGripperGoal_()
    : distance(0)
    , velocity(0)
    , force(0)
    , calibrate(false)
    , reset(false)  {
    }
  FmGripperGoal_(const ContainerAllocator& _alloc)
    : distance(0)
    , velocity(0)
    , force(0)
    , calibrate(false)
    , reset(false)  {
  (void)_alloc;
    }



   typedef int64_t _distance_type;
  _distance_type distance;

   typedef int64_t _velocity_type;
  _velocity_type velocity;

   typedef int64_t _force_type;
  _force_type force;

   typedef uint8_t _calibrate_type;
  _calibrate_type calibrate;

   typedef uint8_t _reset_type;
  _reset_type reset;





  typedef boost::shared_ptr< ::fm_gripper_msgs::FmGripperGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::fm_gripper_msgs::FmGripperGoal_<ContainerAllocator> const> ConstPtr;

}; // struct FmGripperGoal_

typedef ::fm_gripper_msgs::FmGripperGoal_<std::allocator<void> > FmGripperGoal;

typedef boost::shared_ptr< ::fm_gripper_msgs::FmGripperGoal > FmGripperGoalPtr;
typedef boost::shared_ptr< ::fm_gripper_msgs::FmGripperGoal const> FmGripperGoalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::fm_gripper_msgs::FmGripperGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::fm_gripper_msgs::FmGripperGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::fm_gripper_msgs::FmGripperGoal_<ContainerAllocator1> & lhs, const ::fm_gripper_msgs::FmGripperGoal_<ContainerAllocator2> & rhs)
{
  return lhs.distance == rhs.distance &&
    lhs.velocity == rhs.velocity &&
    lhs.force == rhs.force &&
    lhs.calibrate == rhs.calibrate &&
    lhs.reset == rhs.reset;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::fm_gripper_msgs::FmGripperGoal_<ContainerAllocator1> & lhs, const ::fm_gripper_msgs::FmGripperGoal_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace fm_gripper_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::fm_gripper_msgs::FmGripperGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::fm_gripper_msgs::FmGripperGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::fm_gripper_msgs::FmGripperGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::fm_gripper_msgs::FmGripperGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fm_gripper_msgs::FmGripperGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fm_gripper_msgs::FmGripperGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::fm_gripper_msgs::FmGripperGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fff58c2b7a2066e0d202de176f11f4bd";
  }

  static const char* value(const ::fm_gripper_msgs::FmGripperGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xfff58c2b7a2066e0ULL;
  static const uint64_t static_value2 = 0xd202de176f11f4bdULL;
};

template<class ContainerAllocator>
struct DataType< ::fm_gripper_msgs::FmGripperGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fm_gripper_msgs/FmGripperGoal";
  }

  static const char* value(const ::fm_gripper_msgs::FmGripperGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::fm_gripper_msgs::FmGripperGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"#goal         \n"
"int64 distance\n"
"int64 velocity\n"
"int64 force\n"
"bool calibrate\n"
"bool reset\n"
;
  }

  static const char* value(const ::fm_gripper_msgs::FmGripperGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::fm_gripper_msgs::FmGripperGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.distance);
      stream.next(m.velocity);
      stream.next(m.force);
      stream.next(m.calibrate);
      stream.next(m.reset);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct FmGripperGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::fm_gripper_msgs::FmGripperGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::fm_gripper_msgs::FmGripperGoal_<ContainerAllocator>& v)
  {
    s << indent << "distance: ";
    Printer<int64_t>::stream(s, indent + "  ", v.distance);
    s << indent << "velocity: ";
    Printer<int64_t>::stream(s, indent + "  ", v.velocity);
    s << indent << "force: ";
    Printer<int64_t>::stream(s, indent + "  ", v.force);
    s << indent << "calibrate: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.calibrate);
    s << indent << "reset: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.reset);
  }
};

} // namespace message_operations
} // namespace ros

#endif // FM_GRIPPER_MSGS_MESSAGE_FMGRIPPERGOAL_H
