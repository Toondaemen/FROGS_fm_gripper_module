// Generated by gencpp from file fm_gripper_msgs/FmGripperFeedback.msg
// DO NOT EDIT!


#ifndef FM_GRIPPER_MSGS_MESSAGE_FMGRIPPERFEEDBACK_H
#define FM_GRIPPER_MSGS_MESSAGE_FMGRIPPERFEEDBACK_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace fm_gripper_msgs
{
template <class ContainerAllocator>
struct FmGripperFeedback_
{
  typedef FmGripperFeedback_<ContainerAllocator> Type;

  FmGripperFeedback_()
    : status(0.0)  {
    }
  FmGripperFeedback_(const ContainerAllocator& _alloc)
    : status(0.0)  {
  (void)_alloc;
    }



   typedef double _status_type;
  _status_type status;





  typedef boost::shared_ptr< ::fm_gripper_msgs::FmGripperFeedback_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::fm_gripper_msgs::FmGripperFeedback_<ContainerAllocator> const> ConstPtr;

}; // struct FmGripperFeedback_

typedef ::fm_gripper_msgs::FmGripperFeedback_<std::allocator<void> > FmGripperFeedback;

typedef boost::shared_ptr< ::fm_gripper_msgs::FmGripperFeedback > FmGripperFeedbackPtr;
typedef boost::shared_ptr< ::fm_gripper_msgs::FmGripperFeedback const> FmGripperFeedbackConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::fm_gripper_msgs::FmGripperFeedback_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::fm_gripper_msgs::FmGripperFeedback_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::fm_gripper_msgs::FmGripperFeedback_<ContainerAllocator1> & lhs, const ::fm_gripper_msgs::FmGripperFeedback_<ContainerAllocator2> & rhs)
{
  return lhs.status == rhs.status;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::fm_gripper_msgs::FmGripperFeedback_<ContainerAllocator1> & lhs, const ::fm_gripper_msgs::FmGripperFeedback_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace fm_gripper_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::fm_gripper_msgs::FmGripperFeedback_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::fm_gripper_msgs::FmGripperFeedback_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::fm_gripper_msgs::FmGripperFeedback_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::fm_gripper_msgs::FmGripperFeedback_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fm_gripper_msgs::FmGripperFeedback_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fm_gripper_msgs::FmGripperFeedback_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::fm_gripper_msgs::FmGripperFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7e1ff3a25d34c3fba4479917ce302971";
  }

  static const char* value(const ::fm_gripper_msgs::FmGripperFeedback_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7e1ff3a25d34c3fbULL;
  static const uint64_t static_value2 = 0xa4479917ce302971ULL;
};

template<class ContainerAllocator>
struct DataType< ::fm_gripper_msgs::FmGripperFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fm_gripper_msgs/FmGripperFeedback";
  }

  static const char* value(const ::fm_gripper_msgs::FmGripperFeedback_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::fm_gripper_msgs::FmGripperFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"#feedback\n"
"float64 status\n"
"\n"
"\n"
;
  }

  static const char* value(const ::fm_gripper_msgs::FmGripperFeedback_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::fm_gripper_msgs::FmGripperFeedback_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.status);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct FmGripperFeedback_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::fm_gripper_msgs::FmGripperFeedback_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::fm_gripper_msgs::FmGripperFeedback_<ContainerAllocator>& v)
  {
    s << indent << "status: ";
    Printer<double>::stream(s, indent + "  ", v.status);
  }
};

} // namespace message_operations
} // namespace ros

#endif // FM_GRIPPER_MSGS_MESSAGE_FMGRIPPERFEEDBACK_H
